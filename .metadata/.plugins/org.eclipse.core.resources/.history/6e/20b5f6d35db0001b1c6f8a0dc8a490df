package vm.com;

import vm.Payment;
import vm.VendingMachine;
import vm.VendingMachineFactory;
import vm.emulator.Snack;
import vm.exceptions.FullCapacityForSnack;
import vm.exceptions.NotAcceptedDenominations;
import vm.exceptions.SoldOutExp;
import vm.impl.PaymentCoinImpl;
import vm.impl.PaymentNoteImpl;
import vm.impl.VendingMachineImpl;
import vm.keypad.Keypad;

import java.util.Map;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import vm.emulator.*;


/**
 * Unit test for simple App.
 */
public class SnackMachineTest 
{
    private static VendingMachineImpl vm;
    
   @BeforeClass
   public static void setUp() throws NotAcceptedDenominations {
	   vm = (VendingMachineImpl) VendingMachineFactory.createVendingMachine();
	   // fill in the machine before
	   
   }
   
   @AfterClass
   public static void tearDown() {
	   System.out.println("my state afterAllTests: "+vm.getState());
	   vm = null;
   }
   
   @Test
   public void testHappySenarioWithCoin() {
	   // first fill in snack to machine
	   fillMyVm(10);
	   // wants to purchase snack
	   // press at keypad
	   Keypad key = new Keypad();
	   vm.getSnackPrice(Snack.COKE);
	   vm.setCurrentSnackSlot(Snack.COKE);
	   //The customer inserts the money.
	   Payment coin = new PaymentCoinImpl(CoinSlot.COIN_10);
	   vm.insertMoney(coin);
	   printWhatInsideMyVM();	   
   }
   @Test
   public void testHappySenarioWithNote() {
	// first fill in snack to machine
	   fillMyVm(10);
	   // wants to purchase snack
	   // press at keypad
	   Keypad key = new Keypad();
	   vm.getSnackPrice(Snack.CHOCLATEPAR);
	   vm.setCurrentSnackSlot(Snack.CHOCLATEPAR);
	   //The customer inserts the money.
	   Payment coin = new PaymentCoinImpl(CoinSlot.COIN_20);
	   vm.insertMoney(coin);
	   printWhatInsideMyVM();	 
   }
   @Test
   public void testUnHappySenario() {
	   // first fill in VM machine
   }
   @Test(expected = SoldOutExp.class)
   public void testPurchaseUnavialableSnack() {
	   //before adding any snack to VM
	   printWhatInsideMyVM();
	   vm.getSnackPrice(Snack.CANDY);
   }
   @Test(expected = FullCapacityForSnack.class)
   public void testFullCapacityFromSameSnack() {
	   // 1- machine is in idle state try ask for one item price
	   printWhatInsideMyVM();
	   vm.setCapacity(10);
	   vm.refillSnack(Snack.CHIPS, 10);
	   vm.refillSnack(Snack.CHIPS, 1);
	   printWhatInsideMyVM();
   }
   @Test
   public void testInsertToMoneyPocketCaseIdleState() {
	   // 1- machine is in idle state try ask for one item price
	   printWhatInsideMyVM();
	   vm.refillSnack(Snack.CANDY, 3);
	   vm.refillSnack(Snack.CHIPS, 10);
	   vm.getSnackPrice(Snack.CANDY);
	   printWhatInsideMyVM();
   }
   public void fillMyVm(int capacity) {
	   vm.setCapacity(capacity);
	   vm.refillSnack(Snack.CHIPS, capacity);
	   vm.refillSnack(Snack.CANDY, capacity);
	   vm.refillSnack(Snack.CHOCLATEPAR, capacity);
	   vm.refillSnack(Snack.COKE, capacity);
	   vm.refillSnack(Snack.COOKIES, capacity);
	   vm.refillSnack(Snack.NUTS, capacity);
	   
   }
   public void printWhatInsideMyVM() {
	   System.out.println("My state before: "+vm.getState());
	   System.out.println("My total Revenue: "+vm.getTotalRevenue());
	  
	   
	   System.out.println("My state afterOneTest: "+vm.getState().toString());
	   System.out.println("########################################");
 
   }
   public void printSnackPocket() {
	   String str = vm.getSnackPocket().toString();
	   if(str == "") {
		   System.out.println("EMPTY Snack Pocket VM Machine O_o");
	   } else {
		   System.out.println(str);
	   }
   }
   public void printMoneyPocket() {
	   String str = vm.getSnackPocket().toString();
	   if(str == "") {
		   System.out.println("EMPTY Snack Pocket VM Machine O_o");
	   } else {
		   System.out.println(str);
	   }
   }
}
